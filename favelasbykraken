<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Planilha de Controle de Pessoal</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #111827; /* Fundo cinza escuro */
            color: #F3F4F6; /* Texto claro */
        }
        /* Estilização da barra de rolagem para um visual mais moderno */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #1F2937;
        }
        ::-webkit-scrollbar-thumb {
            background: #4B5563;
            border-radius: 4px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #6B7280;
        }
        .table-cell {
            padding: 12px 16px;
            vertical-align: middle;
        }
        .modal {
            display: none; /* Escondido por padrão */
        }
    </style>
</head>
<body>

    <div class="container mx-auto p-4 md:p-8 max-w-7xl">
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-white">Planilha de Controle de Pessoal</h1>
            <p class="text-gray-400 mt-2">Gerencie horários e registre advertências de forma simples.</p>
        </header>

        <!-- Tabela de exibição -->
        <div class="bg-gray-800 rounded-2xl shadow-lg overflow-hidden">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-700">
                    <thead class="bg-gray-900">
                        <tr>
                            <th class="table-cell text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Nome</th>
                            <th class="table-cell text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Horário</th>
                            <th class="table-cell text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Advertências</th>
                            <th class="table-cell text-center text-xs font-medium text-gray-300 uppercase tracking-wider">Ações</th>
                        </tr>
                    </thead>
                    <tbody id="scheduleBody" class="divide-y divide-gray-700">
                        <!-- Linhas da tabela serão inseridas aqui via JavaScript -->
                    </tbody>
                </table>
                 <div id="emptyState" class="text-center p-8 text-gray-500" style="display: none;">
                    <p>Nenhuma pessoa na lista.</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal para adicionar advertência -->
    <div id="warningModal" class="modal fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4">
        <div class="bg-gray-800 rounded-2xl p-8 shadow-2xl w-full max-w-md transform transition-all scale-95 opacity-0">
            <h2 class="text-2xl font-bold mb-4">Adicionar Advertência</h2>
            <p class="mb-4 text-gray-400">Descreva o motivo da advertência para <strong id="warningPersonName" class="text-white"></strong>.</p>
            <textarea id="warningReason" rows="4" class="w-full bg-gray-700 text-white border-gray-600 rounded-lg p-3 focus:ring-2 focus:ring-blue-500 focus:outline-none transition" placeholder="Ex: Atraso de 30 minutos na segunda-feira..."></textarea>
            <div class="mt-6 flex justify-end space-x-4">
                <button id="cancelWarning" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded-lg transition">Cancelar</button>
                <button id="saveWarning" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg transition">Salvar</button>
            </div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tableBody = document.getElementById('scheduleBody');
            const emptyState = document.getElementById('emptyState');

            // Modal elements
            const warningModal = document.getElementById('warningModal');
            const warningPersonName = document.getElementById('warningPersonName');
            const warningReasonInput = document.getElementById('warningReason');
            const saveWarningBtn = document.getElementById('saveWarning');
            const cancelWarningBtn = document.getElementById('cancelWarning');

            let people = [];
            let currentPersonId = null;

            // --- Funções Principais ---

            // Carrega os dados do localStorage ao iniciar
            function loadFromStorage() {
                const storedPeople = localStorage.getItem('scheduleAppPeople');
                if (storedPeople) {
                    people = JSON.parse(storedPeople);
                } else {
                    // Se não houver dados, carrega a planilha padrão da imagem
                    const defaultPeople = [
                        { id: crypto.randomUUID(), name: 'camarão 🦐', shift: 'Seg (Favela 13), Qua (Favela 13), Sex (Favela 13)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'Abelha 🐝', shift: 'Seg (Favela 17), Ter (Desmanche 8)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'Anjo_Piupiu 🐥', shift: 'Seg (Biqueira 0), Sáb (Aeroporto 28)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'FORMIGA 🐜', shift: 'Seg (Favela 14), Qua (Favela 14), Sex (Favela 14)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'Furão', shift: 'Ter (Campo 27), Sáb (Desmanche 8)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'Kitsune', shift: 'Qua (Biqueira 0), Sex (Biqueira 0)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'Raposa 🦊', shift: 'Qui (Aeroporto 28), Sex (Favela 17)', warnings: [] },
                        { id: crypto.randomUUID(), name: 'SHARK 🦈', shift: 'Qui (Campo 27), Qui (Desmanche 8)', warnings: [] }
                    ];
                    people = defaultPeople;
                    saveToStorage(); // Salva os dados padrão para a próxima vez
                }
                renderTable();
            }

            // Salva os dados no localStorage
            function saveToStorage() {
                localStorage.setItem('scheduleAppPeople', JSON.stringify(people));
            }
            
            // Atualiza a visualização da tabela
            function updateEmptyState() {
                if (people.length === 0) {
                    emptyState.style.display = 'block';
                    tableBody.parentElement.parentElement.classList.add('hidden');
                } else {
                    emptyState.style.display = 'none';
                    tableBody.parentElement.parentElement.classList.remove('hidden');
                }
            }

            // Renderiza a tabela com os dados atuais
            function renderTable() {
                tableBody.innerHTML = '';
                people.forEach(person => {
                    const warningsHtml = person.warnings.map((w, index) =>
                        `<li class="text-sm text-gray-300 list-disc list-inside mb-1 flex justify-between items-center">
                            <span><span class="font-semibold">${w.date}:</span> ${w.reason}</span>
                            <button data-person-id="${person.id}" data-warning-index="${index}" class="remove-warning-btn text-red-500 hover:text-red-400 text-xs ml-2 font-bold p-1">[X]</button>
                         </li>`
                    ).join('');

                    const row = document.createElement('tr');
                    row.className = 'hover:bg-gray-700 transition-colors duration-200';
                    row.innerHTML = `
                        <td class="table-cell font-medium text-white">${person.name}</td>
                        <td class="table-cell text-gray-300">${person.shift}</td>
                        <td class="table-cell">
                            <ul class="${warningsHtml ? 'pl-2' : ''}">${warningsHtml || '<span class="text-gray-500 text-sm">Nenhuma</span>'}</ul>
                        </td>
                        <td class="table-cell text-center">
                            <div class="flex items-center justify-center space-x-2">
                                <button data-id="${person.id}" class="add-warning-btn bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-3 rounded-lg text-sm transition-transform transform hover:scale-105">Advertir</button>
                                <button data-id="${person.id}" class="remove-person-btn bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-3 rounded-lg text-sm transition-transform transform hover:scale-105">Remover</button>
                            </div>
                        </td>
                    `;
                    tableBody.appendChild(row);
                });
                updateEmptyState();
            }

            // Adiciona uma advertência a uma pessoa
            function addWarning(personId, reason) {
                const person = people.find(p => p.id === personId);
                if (person && reason) {
                    const now = new Date();
                    const formattedDate = `${now.toLocaleDateString('pt-BR')} ${now.toLocaleTimeString('pt-BR', {hour: '2-digit', minute:'2-digit'})}`;
                    person.warnings.push({
                        date: formattedDate,
                        reason: reason
                    });
                    saveToStorage();
                    renderTable();
                }
            }

            // Remove uma pessoa
            function removePerson(personId) {
                people = people.filter(p => p.id !== personId);
                saveToStorage();
                renderTable();
            }

            // Remove uma advertência
            function removeWarning(personId, warningIndex) {
                const person = people.find(p => p.id === personId);
                if (person) {
                    person.warnings.splice(warningIndex, 1);
                    saveToStorage();
                    renderTable();
                }
            }
            
            // --- Funções do Modal ---
            function openWarningModal(personId) {
                currentPersonId = personId;
                const person = people.find(p => p.id === personId);
                if (person) {
                    warningPersonName.textContent = person.name;
                    warningModal.style.display = 'flex';
                    setTimeout(() => {
                        warningModal.querySelector('div').classList.remove('scale-95', 'opacity-0');
                    }, 10);
                }
            }

            function closeWarningModal() {
                 warningModal.querySelector('div').classList.add('scale-95', 'opacity-0');
                 setTimeout(() => {
                    warningModal.style.display = 'none';
                    warningReasonInput.value = '';
                    currentPersonId = null;
                 }, 200);
            }

            // --- Event Listeners ---
            
            // Ações na tabela (delegar eventos)
            tableBody.addEventListener('click', (e) => {
                const target = e.target.closest('button');
                if (!target) return;

                const id = target.dataset.id;
                if (target.classList.contains('add-warning-btn')) {
                    openWarningModal(id);
                } else if (target.classList.contains('remove-person-btn')) {
                    removePerson(id);
                } else if (target.classList.contains('remove-warning-btn')) {
                    const personId = target.dataset.personId;
                    const warningIndex = parseInt(target.dataset.warningIndex, 10);
                    removeWarning(personId, warningIndex);
                }
            });

            // Ações do modal
            saveWarningBtn.addEventListener('click', () => {
                const reason = warningReasonInput.value.trim();
                if (reason && currentPersonId) {
                    addWarning(currentPersonId, reason);
                    closeWarningModal();
                }
            });
            
            cancelWarningBtn.addEventListener('click', closeWarningModal);
            
            warningModal.addEventListener('click', (e) => {
                if (e.target === warningModal) {
                    closeWarningModal();
                }
            });

            // Carregamento inicial
            loadFromStorage();
        });
    </script>

</body>
</html>

